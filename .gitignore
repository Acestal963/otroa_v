# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
.DS_Store
dist
dist-ssr
coverage
*.local

/cypress/videos/
/cypress/screenshots/

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

*.tsbuildinfo

const renderGraph = () => {
  // Remove any existing SVG elements before rendering the updated graph
  d3.select("#graph-container").selectAll("svg").remove()

  const svg = d3.select("#graph-container")
    .append("svg")
    .attr("width", "100%")
    .attr("height", "100%")
    .call(d3.zoom().on("zoom", (event) => {
      svg.attr("transform", event.transform)
    }))
    .append("g")

  const width = 800
  const height = 600

  const simulation = d3.forceSimulation(graph.value)
    .force("link", d3.forceLink().id(d => d.id))
    .force("charge", d3.forceManyBody().strength(-500))
    .force("center", d3.forceCenter(width / 2, height / 2))

  // Create links (edges)
  const link = svg.append("g")
    .attr("class", "links")
    .selectAll("line")
    .data(graph.value.flatMap(node => node.edges.map(e => ({ source: node.id, target: e }))))
    .enter()
    .append("line")
    .attr("stroke", "#999")
    .attr("stroke-width", 2)

  // Create nodes
  const node = svg.append("g")
    .attr("class", "nodes")
    .selectAll("g")
    .data(graph.value)
    .enter()
    .append("g")
    .call(d3.drag()
      .on("start", (event, d) => {
        event.sourceEvent.stopPropagation() // Prevent zoom during drag
        if (!event.active) simulation.alphaTarget(0.3).restart()
        d.fx = d.x
        d.fy = d.y
      })
      .on("drag", (event, d) => {
        event.sourceEvent.stopPropagation() // Prevent zoom during drag
        d.fx = event.x
        d.fy = event.y
      })
      .on("end", (event, d) => {
        event.sourceEvent.stopPropagation() // Prevent zoom during drag
        if (!event.active) simulation.alphaTarget(0)
        d.fx = null
        d.fy = null
      }))

  // Append circles for nodes
  node.append("circle")
    .attr("r", 15)
    .attr("fill", d => d.color || "#FFFFFF")
    .attr("stroke", "#000000")
    .attr("stroke-width", 2)

  // Append text to each node
  node.append("text")
    .attr("dy", ".35em")
    .attr("x", d => 0)
    .attr("y", d => 0)
    .attr("text-anchor", "middle")
    .attr("font-size", "10px")
    .attr("fill", "#000000")
    .text(d => d.name)

  simulation.on("tick", () => {
    link
      .attr("x1", d => graph.value.find(node => node.id === d.source).x)
      .attr("y1", d => graph.value.find(node => node.id === d.source).y)
      .attr("x2", d => graph.value.find(node => node.id === d.target).x)
      .attr("y2", d => graph.value.find(node => node.id === d.target).y)

    node
      .attr("transform", d => `translate(${d.x},${d.y})`)
  })
}

.vscode
